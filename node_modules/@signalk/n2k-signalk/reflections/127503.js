const { acPhase } = require('../utils.js')

function instance (n2k) {
  return n2k.fields['Instance']
}

function prefix(n2k) {
  return `electrical.ac.${instance(n2k)}.${acPhase(n2k)}`
}

module.exports = [
  {
    source: 'Acceptability',
    node: function (n2k) {
      return `${prefix(n2k)}.acceptability`
    }
  },
  {
    node: function (n2k) {
      return `${prefix(n2k)}.voltage`
    },
    value: function (n2k, state) {
      var voltage = Number(n2k.fields.list[0].Voltage)
      return isNaN(voltage) ? null : voltage
    }
  },
  {
    node: function (n2k) {
      return `${prefix(n2k)}.current`
    },
    value: function (n2k, state) {
      var current = Number(n2k.fields.list[0].Current)
      return isNaN(current) ? null : current
    }
  },
  {
    node: function (n2k) {
      return `${prefix(n2k)}.frequency`
    },
    value: function (n2k, state) {
      var frequency = Number(n2k.fields.list[0].Frequency)
      return isNaN(frequency) ? null : frequency
    }
  },
  {
    node: function (n2k) {
      return `${prefix(n2k)}.breakerSize`
    },
    value: function (n2k, state) {
      var breakerSize = Number(n2k.fields.list[0]['Breaker Size'])
      return isNaN(breakerSize) ? null : breakerSize
    }
  },
  {
    source: 'Real Power',
    node: function (n2k) {
      return `${prefix(n2k)}.realPower`
    }
  },
  {
    source: 'Reactive Power',
    node: function (n2k) {
      return `${prefix(n2k)}.reactivePower`
    }
  },
  {
    source: 'Power Factor',
    node: function (n2k) {
      return `${prefix(n2k)}.powerFactor`
    }
  },
]
